name: Build with vcpkg

on:
  pull_request:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'vcpkg.json'
  push:
    branches:
      - develop
      - master
      - main

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        name: [ubuntu-gcc, macos-clang, windows-msvc]
        buildtype: [Release]
        luajit: [on]
        include:
          - name: windows-msvc
            os: windows
            cxx: cl.exe
            cc: cl.exe
            triplet: x64-windows
            packages: >
              boost-iostreams boost-asio boost-system boost-variant boost-lockfree boost-filesystem boost-uuid
              glew luajit libogg libvorbis openal-soft opengl openssl physfs zlib
          - name: ubuntu-gcc
            os: ubuntu
            cxx: g++
            cc: gcc
            triplet: x64-linux
            packages: >
              boost-iostreams boost-asio boost-system boost-variant boost-lockfree glew
              boost-filesystem boost-uuid physfs openal-soft libogg libvorbis zlib opengl
          - name: macos-clang
            os: macos
            cxx: clang++
            cc: clang
            triplet: x64-osx
            packages: >
              boost-iostreams boost-asio boost-system boost-variant boost-lockfree glew
              boost-filesystem boost-uuid libogg libvorbis zlib opengl
        exclude:
          - name: windows-msvc
            luajit: off

    steps:
      - uses: actions/checkout@v2

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Ubuntu - install packages
        if: contains( matrix.os, 'ubuntu')
        # vcpkg has lua 5.3+
        run: sudo apt-get install libglew-dev liblua5.1-0-dev libluajit-5.1-dev

      - name: MacOS - install packages
        if: contains( matrix.os, 'macos')
        run: brew install physfs pkgconfig lua@5.1 luajit xquartz

      - name: Set Environment vars
        run: |
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v7.1
        with:
          vcpkgArguments: ${{ matrix.packages }}
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgTriplet: ${{ matrix.triplet }}
          vcpkgGitCommitId: 9a49e3df7f729655318c59b9985c9c18ad0c99d6

      - name: Build with CMake
        uses: lukka/run-cmake@v3
        with:
          buildDirectory: ${{ runner.workspace }}/build
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeAppendedArgs: '-G Ninja -DCMAKE_BUILD_TYPE="${{ matrix.buildtype }}" -DLUAJIT="${{ matrix.luajit }}"'
          useVcpkgToolchainFile: true

      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Upload artifact binary
        if: "! contains( matrix.os, 'windows')"
        uses: actions/upload-artifact@v2
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/otclient

      - name: Upload artifact binary (exe)
        if: contains( matrix.os, 'windows')
        uses: actions/upload-artifact@v2
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/otclient.exe

      - name: Upload artifact binary (dlls)
        if: contains( matrix.os, 'windows')
        uses: actions/upload-artifact@v2
        with:
          name: otclient-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/*.dll